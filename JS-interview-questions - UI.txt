Fieldglass {
  mukeshsharma054
  Welcome12@
}

// JUNIOR SOFTWARE ENGINEER
{
  Q1: How many data types in javascript?
  Ans: 
      Primitives data types: String, Boolean, Number etc
      Non-primitive: Arrays and Objects

  Q2: What is Hoisting in javascript?    Yes
  Ans: JavaScript's default behavior of moving all declarations to the top of the current scope

  Q3: What are callbacks?
  Ans: A callback is a function that will be executed after another function gets executed. Callback is basically used in asynchronous operations.

  Q4: Is javascript a statically typed or a dynamically typed language?
  Ans: JavaScript is a dynamically typed language. In a dynamically typed language, the type of a variable is checked during run-time in contrast to a statically typed language, where the type of a variable is checked during compile-time.

  Q5: Explain passed by value and passed by reference?
  Ans: Primitive data types when passed to another variable, are passed by value (only value is transfered) whereas Non-Primitives data types passes the location to another variable where that value is actually stored.

  Q6: What is an Immediately Invoked Function in JavaScript?
  Ans: An Immediately Invoked Function ( known as IIFE) is a function that runs as soon as it is defined.

  Q7: Explain Higher Order Functions in javascript?
  Ans: Functions that operate on other functions, either by taking them as arguments or by returning them, are called higher-order functions.

  Q8: What are object prototypes?
  Ans: A prototype is a blueprint of an object. The prototype allows us to use properties and methods on an object even if the properties and methods do not exist on the current object.

  Q9: What is memoization?
  Ans: Memoization is a form of caching where the return value of a function is cached based on its parameters. If the parameter of that function is not changed, the cached version of the function is returned.

  Q10: What is recursion and how it is usesul?
  Ans: Recursion is a technique to iterate over an operation by having a function call itself repeatedly until it arrives at a result. It reduces the code and complexity.

  Q11: How comfortable are you in CSS? Have you ever worked on any CSS framework like Bootstrap, tailwind css, Kendo UI etc?
  Ans: Candidate needs to explain how we can write our own custom css. In real world project for the sake of time & fast development we use CSS frameworks (follow up questions).

}


// SOFTWARE ENGINEER
{
  Q1: What are closures (and some follow up questions on this)?
  Ans: Closures are an ability of a function to remember the variables and functions that are declared in its outer scope.
      Note: This is a wide concept and can not be explained in less words.

  Q2: Explain debouncing in detail?
  Ans: Debouncing is a programming practice used to ensure that time-consuming tasks do not fire so often, that it stalls the performance of the web page.
      It exucutes the function after a specific time interval after the last event occured.

  Q3: What are promises? How it helps in asynchronous programming.
  Ans: Promises are basically tools to deal with asynchronous operations. It removes callback hell issue (and some follow up questions on it).

  Q4: Practical task: We have a button on page. Count how many times the button have been clicked?
  Ans: use closure concept to keep track of button clicked (checking core concepts knowledge in JS).

  Q5: What is currying and it core usage?
  Ans: Currying in JavaScript transforms a function with multiple arguments into a nested series of functions, each taking a single argument. (some follow up questions, probably some practical tasks on this concept).

  Q6: Expalin binary search? How it is useful in searching mechanism? Time & Space Complexity.
  Ans: This is a optimised searching technique also called divide and conquer approach. In this technique on every repetition we discard half of record length.

  Q7: Practical task: How can we create custom event emitter?
  Ans: Candidate needs to write code. He needs to create a Event emitter class & should have on, emit, removeListeners functions etc.

  Q8: Practical task: Write polyfill for Array.prototype.bind() function?
  Ans: Candidate needs to write code.

  Q9: Prototypal inheritance in JS and its basic implementation.
  Ans: Inheritance refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using objects (some follow up questions).

  Q10: REACT JS: Explain state management library - Redux or Context API
  Ans: Redux and Context API are both used to manage application state. Context API can be used in small-medium apps whereas Redux can be used in large applications.

  Q11: REACT JS: Difference between useMemo & useCallback hooks?
  Ans: 
      useMemo - It caches the return value of a function.
      useCallback: It prevents the function from being initializing again & again(few followup questions).

}



// SENIOR SOFTWARE ENGINEER
{
    Senior Software Engineer should know all the basic stuff mentioned above. In addition to that he/she should be well versed in advance JS concepts like:
  1) Images - 
      - Compression
      - Lazy Loading
      - Progressive Enhancement
      - Client HTTP hint
      - Responsive Images
  2) Videos -
      - Progressive Enhancement
      - Streaming
      - Videos with no audio
      - Preload
  3) Fonts - 
      - Font display decorator
      - Flout with class
      - Async Load CSS
      - Font face observer
  4) CSS - 
      - Lazy Loading
      - Critical CSS Rendering
  5) JavaScript - 
      - defer vs async => 
      - Web Worker
      - Lazy Loading

  Questions::

  Q1: Explain critical rendering path?
  Ans: The Critical Rendering Path is the sequence of steps the browser goes through to convert the HTML, CSS, and JavaScript into pixels on the screen (CSSOM, DOM etc)

  Q2: Practical task - Write your own Promise constructor?
  Ans: Candidate needs to write code (some follow up questions)

  Q3: How generator function works & how they are related to Promises? Explain with example!
  Ans: They allow you to define an iterative algorithm by writing a single function whose execution is not continuous. Candidate need to write custom implementation.

  Solid Principles: No
  Q4: Design pattern - Facade & Builder pattern? 
  Ans: 
      Facade - The FaÃ§ade pattern provides an interface which shields clients from complex functionality in one or more subsystems.
      Builder - The Builder pattern allows a client to construct a complex object by specifying the type and content only. Construction details are hidden from the client entirely.

  Q5: How will you design a Autocomplete functionality? implement in vanilla JS.
  Ans: To complete this functionality, we need to call an api for results and show them in dropdown. 
      Dropdown should be searchable & can filter records accordingly.
      We can use debouncing technique to reduce the api calls on every keystroke.

  Q6: How service worker works & how they can be useful for application?
  Ans: Service workers essentially act as proxy servers that sit between web applications, the browser, and the network (when available).

  Q7: Application optimizing techniques in detail?
  Ans: Optimze images sizes, CDN, caching, treeshaking, code splitting etc.

  Q8: What are the security aspects required to build a secure web app? Explain few points.
  Ans: OWASP 10 principles, encrypt the code, using Latest Cryptography Techniques, high level authentication, compromised passwords etc.

  Q9: How V8 engine works? High level overview!
  Ans: This question needs high level understanding of Javascript under the hood.
      - It uses Mark & Sweep Algorithm.
      - Interpreter Name => Ignition [working under the hood]
      - Compiler => TurboFan
      - Orinoco => Garbage Collector

  Q10: How event loop works in detail? What is the role of execution context?
  Ans: It includes Micro process queue, Macro queue, call stack & execution context.

  Q11: Difference between Promises & Observable?
  Ans: Both are used to deal with asynchronous operations.
      Observables are cancellable but promises are not.
      There are lot of difference between them, candidate should have deep understanding on this.

  Q12: Architecture: How will you setup React application from scratch?
  Ans: We can use create-react-app or any bundling tool like Vite or Parcel.

  Q13: Angular vs React & why?
  Ans: Candidate needs to explain from each & every apects of both. Props & Cons in detail.
}


===============
Structure given in Interview feedback portal.
1) Arrays: {
  - map polyfill    => 
}
2) Objects => Deep Copy of an object {     => 
    const obj = {
  name: "Ram",
  address: {
    city: "California",
    post: {
      a: 1,
      b: 2,
    },
  },
};
}
3) Functions => {
  memoization function    === 
  {
    function aa(a, b) {return a+b}
    const memo = myMemoFn(aa);
    memo(2,3)
  },
  Closures => write basic debounce,    => debounce: 
  currying=> add(5)(2)(4)(5)()          => 
}
4) Promises => {
  Fetch & Axios => diff    => 
  Promise basic first & then polyfill
  Promise.any polyfill    => 
  Max 3 retries => 
}
5) Client side => {
  - diff b/w event.currentTarget & event.target    => 
  - Event delegation (we have a div and inside we have 10 rows we want to attach click handler) => 
}
6) Performance Optimization {
  - What are the basic techniques of application performance {
    Ans: Optimze images sizes, CDN, caching, treeshaking(No), code splitting etc.

  - Basic of Service Workers   ==== 
    OR
  - Critical Rendering Path
  }
}

7) Web Communication Protocol {
  Have you ever worked on Graphql, Polling, Web Sockets   == 
}
8) Software engineering process {
  How code review process is there?
}
9) VCS => Git rebase & git merge diff    => 
10) 

Random question from where we can start the Interview ==========
HTML {
  - Semantic HTML => 
  - CSSOM    => 
  - Index DB => 
  - Async defer: 
  - Service Workers => 
  - Web Workers => No
  - Diff b/w Client side rendering and server (you get incremental parsing and rendering of HTML and automatic yielding to the main thread for free) on web performance
}
CSS {
  - Positioning    => 
  - Flexbox        => 
  - Opacity 0 & display:none diff and visibility:hidden  => 
  - Resource Hinting : 
}

++++++++++++++++++++++++++++++
1) Array => {
  - Time complexity of Array.shift       => 
  - Can we use forOf loop for objects?  => 
    if yes, why,
    if no, why,

    {
      name: "ABC",
      section: "A"
    }                      => 

    instanceOf operator  => 
}
2) Iterators & generators => Followup question from (1) point of forOf loop => 
2) Classes & OOP => SingleTon pattern  =>  
3) Prototype Chaining: 
4) 

In last related to framework (React & Vue) => {
  thunk - saga usage =>  
  - Diff between useMemo & useCallback;   => 
  - How composition APIs are different from previous versions
  - Mixins in Vue
  - 
}


Today's Pratical task {
  1) Closure => 
  1) debounce => 
  2) How many times button has been clicked => 
  3) Currying => add(5)(2)(4)(5)()    => 
  3) Memoization => 
  4) Max Retry promise => 
  4) Promise.all => 
  5) Custom Rate Limiter Node JS  // Deny a request if that CLIENT has made more than 100 requests in past 1 sec   => 
  6) MemLab, fruite: Memory leak open source framework
}

++++++++++++++++++++++++++++
function sum(a) {
  return function(b) {
    return a.reduce((acc, curr) => {
      acc.push(curr + b);
      return acc
    }, [])
  }
}
sum([1,2,3])(3) // [4,5,6]

+++++++++
var i = 0;
while (i++ < 4) {
â¯ setTimeout(() => console.log(i), 1000);
}
// 5555

++++++++++++++++++++++
const obj = {
  name: "Evan",
  lastName: "Sharma",
  getFullName() {
    console.log(`${this.name} ${this.lastName}`);
  },
};
obj.getFullName(); // your answer
const getFullName = obj.getFullName;
getFullName(); // your answer
  //Evan Sharma
 // and what will be here?  // undefined undefined

 ++++++++++++++++++++++++++
 function foo() {
  let x = (y = 0);
  x++;
  y++;
  return x;
}
console.log(foo(), typeof x, typeof y);
 //  1, undefined, number

 let arr = [12, 35, 1, 10, 34, 1];
findSecondLargestElem(arr);

console.log(zeroSum([-4, -3, -2, -1, 0, 1, 2, 3, 10]));

function toggleFunctionArguments() {}
const aa = toggleFunctionArguments("Hello", "Ram", "Wink", 1);
console.log(aa());
console.log(aa());
console.log(aa());
console.log(aa());
console.log(aa());

var y = 1;
if (function f(){}) {
    y += typeof f;
}
console.log(y);

+++++++++++++++++++++++++ More than 5 years

1) 
  // getName and uppercase are the functions which has some implementation

  import { a, b } from './'
  function execute() {}
  
  execute(a, b)({ name: "Ram" });

2)
  function adding(arg) {}
  let a = adding(1, 2)(2)(4, 3);
  console.log(a()); // 12

3) Promise.all Polyfill 
  // Write a polyfill for Promise.any
  const race = function (promisesArray) {}
  const any = function (promisesArray) {}
  const allSettled = function (promisesArray) {}

4) Sampler
const sampler = (fn, count = 1) => {
  let track = 0;

  return function (...args) {
    track++;

    if (track === count) {
      fn(...args);
      track = 0;
    }
  };
};

function message(msg) {
  console.log(msg);
}

const sample = sampler(message, 5);

sample("1");
sample("2");
sample("3");
sample("4");
sample("12");


5) 
const delayed = (data, delay) => {}

const result = delayed({ foo: 'baz'}, 3000);
result.then(data => {
  console.log(data); // prints {foo: 'baz'} after 3 seconds
});


6) 
var productExceptSelf = function (nums) {}
console.log(productExceptSelf([1, 2, 3, 4])); // [24, 12, 8, 6]


7) 
function maxSubArraySum(arr){}
console.log(maxSubArraySum([-1, -3, 2, 5, 3, 2, -4])); // 12

8) Prototype inheritance for Rectangle and Square
function Rectangle() {}
function Square() {}

9) 
var Singleton = (function () {
  
})();

const myInstance = Singleton.getInstance();
const myInstance2 = Singleton.getInstance();

console.log(myInstance === myInstance2) // true

10) 
function rotatedArray(arr, k) {}
console.log(rotatedArray([1, 2, 3, 4], 2));

11) 
const doMemoize = () => {}

function getResults(a, b) {
  for() {}
  return a + b;
}

const memoizedData = doMemoize(getResults);

console.log(memoizedData(3, 5));

11) 

function countSum(arr, target) {}
const aa = [2, 4, 5, 5, 12, 7, 13, 45];
console.log(countSum(aa, 9));

12) 
const debounceMe = () => {}


School fee: 63300

PRAN: 110197130101